//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors/num_word.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_ctrl_del {
            bindings = <&kp LC(DELETE)>;
            key-positions = <2 1 3>;
        };

        combo_ctrl_w {
            bindings = <&kp LC(W)>;
            key-positions = <7 6 8>;
        };

        combo_eq {
            bindings = <&double_equal>;
            key-positions = <6 7>;
        };

        combo_ctrl_r {
            bindings = <&sk LCTRL>;
            key-positions = <17 18>;
        };

        combo_ctrl_l {
            bindings = <&sk LCTRL>;
            key-positions = <11 12>;
        };

        combo_del {
            bindings = <&kp DEL>;
            key-positions = <13 14>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <11 12 13>;
        };

        combo_write {
            bindings = <&write>;
            key-positions = <16 17 18>;
        };

        combo_super_l {
            bindings = <&sk LEFT_WIN>;
            key-positions = <23 24>;
        };

        combo_super_r {
            bindings = <&sk LEFT_META>;
            key-positions = <27 28>;
        };

        combo_shift_l {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <24 25>;
        };

        combo_shift_r {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <26 27>;
        };

        combo_dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <27 28>;
        };

        combo_close_window {
            bindings = <&quit>;
            key-positions = <22 23 24>;
        };

        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <27 28>;
        };

        combo_capsword {
            bindings = <&caps_word>;
            key-positions = <12 17>;
        };

        combo_speech {
            bindings = <&triple_speech>;
            key-positions = <11 13>;
        };

        combo_quotes {
            bindings = <&triple_quote>;
            key-positions = <16 18>;
        };

        combo_leq {
            bindings = <&leq>;
            key-positions = <3 13>;
        };

        combo_from {
            bindings = <&from>;
            key-positions = <2 12>;
        };

        combo_geq2 {
            bindings = <&geq2>;
            key-positions = <6 16>;
        };

        combo_to {
            bindings = <&combo_to>;
            key-positions = <7 17>;
        };

        combo_geq1 {
            bindings = <&geq1>;
            key-positions = <13 24>;
        };

        combo_hsplit {
            bindings = <&hsplit>;
            key-positions = <11 22>;
        };

        combo_vsplit {
            bindings = <&vsplit>;
            key-positions = <22 23>;
        };

        combo_numword {
            bindings = <&num_word 2>;
            key-positions = <32 36>;
        };

        combo_z {
            bindings = <&kp Z>;
            key-positions = <21 22>;
        };

        combo_game_layer {
            bindings = <&tog 5>;
            key-positions = <0 21 30 9>;
        };
    };

    macros {
        write: write {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp COLON &kp W &kp ENTER>;
            label = "WRITE";
        };

        quit: quit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(W) &kp Q &kp ENTER>;
            label = "QUIT";
        };

        from: from {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp LT &kp MINUS &kp SPACE>;
            label = "FROM";
        };

        combo_to: to {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp SPACE &kp MINUS &kp GT &kp SPACE>;
            label = "TO";
        };

        geq1: geq1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp SPACE &kp GT &kp EQUAL &kp SPACE>;
            label = "GEQ1";
        };

        geq2: geq2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp SPACE &kp EQUAL &kp GT &kp SPACE>;
            label = "GEQ2";
        };

        leq: leq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp SPACE &kp LT &kp EQUAL &kp SPACE>;
            label = "LEQ";
        };

        hsplit: hsplit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(W) &kp S>;
            label = "HSPLIT";
        };

        vsplit: vsplit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(W) &kp V>;
            label = "VSPLIT";
        };

        double_underscore: double_underscore {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            label = "Double Underscore";
            bindings =
                <&macro_tap>,
                <&kp UNDER>,
                <&macro_press>,
                <&kp UNDER &kp UNDER>;
        };

        double_lt: double_lt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            label = "Double Less Than";
            bindings = <&macro_tap>, <&kp LT>, <&macro_press>, <&kp LT &kp LT>;
        };

        double_gt: double_gt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            label = "Double Greater Than";
            bindings = <&macro_tap>, <&kp GT>, <&macro_press>, <&kp GT &kp GT>;
        };

        double_slash: double_slash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            label = "Double Slash";
            bindings =
                <&macro_tap>,
                <&kp SLASH>,
                <&macro_press>,
                <&kp SLASH &kp SLASH>;
        };

        double_bslash: double_bslash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            label = "Double Backslash";
            bindings =
                <&macro_tap>,
                <&kp BACKSLASH>,
                <&macro_press>,
                <&kp BACKSLASH &kp BACKSLASH>;
        };

        double_hash: double_hash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            label = "Double Hash";
            bindings =
                <&macro_tap>,
                <&kp HASH>,
                <&macro_press>,
                <&kp HASH &kp HASH>;
        };

        triple_speech: triple_speech {
            compatible = "zmk,behavior-macro";
            label = "Triple Speech";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp DOUBLE_QUOTES>,
                <&macro_press>,
                <&kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp DOUBLE_QUOTES>;
        };

        triple_quote: triple_quote {
            compatible = "zmk,behavior-macro";
            label = "Triple Quote";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp SQT>,
                <&macro_press>,
                <&kp SQT &kp SQT &kp SQT>;
        };

        triple_eq: triple_eq {
            compatible = "zmk,behavior-macro";
            label = "Triple Equals";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp EQUAL>,
                <&macro_press>,
                <&kp EQUAL &kp EQUAL &kp EQUAL>;
        };

        triple_zero: triple_zero {
            compatible = "zmk,behavior-macro";
            label = "Triple Zero";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp N0>,
                <&macro_press>,
                <&kp N0 &kp N0 &kp N0>;
        };

        triple_dot: triple_dot {
            compatible = "zmk,behavior-macro";
            label = "Triple Dot";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp DOT>,
                <&macro_press>,
                <&kp DOT &kp DOT &kp PERIOD>;
        };

        double_pipe: double_pipe {
            compatible = "zmk,behavior-macro";
            label = "Space Double Pipe Space";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp PIPE>,
                <&macro_press>,
                <&kp SPACE &kp PIPE &kp PIPE &kp SPACE>;
        };

        double_equal: double_equal {
            compatible = "zmk,behavior-macro";
            label = "Space Double Equal Space";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp EQUAL>,
                <&macro_press>,
                <&kp SPACE &kp EQUAL &kp EQUAL &kp SPACE>;
        };

        double_amp: double_amp {
            compatible = "zmk,behavior-macro";
            label = "Space Double Ampersand Space";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp AMPERSAND>,
                <&macro_press>,
                <&kp SPACE &kp AMPS &kp AMPS &kp SPACE>;
        };

        double_bang: double_bang {
            compatible = "zmk,behavior-macro";
            label = "Space Bang Equal Space";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp EXCLAMATION>,
                <&macro_press>,
                <&kp SPACE &kp EXCL &kp EQUAL &kp SPACE>;
        };

        triple_apostrophe: triple_apostrophe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp GRAVE>,
                <&macro_press>,
                <&kp GRAVE &kp GRAVE &kp GRAVE>;

            label = "TRIPLE_APOSTROPHE";
        };
    };

    behaviors {
        new_behavior: new_behavior {
            compatible = "zmk,behavior-toggle-layer";
            label = "NEW_BEHAVIOR";
            #binding-cells = <1>;
        };

        colon_switch: colon_switch {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMICOLON>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     F     ┃     P     ┃     G     ┃   ┃     J     ┃     L     ┃     U     ┃     Y     ┃     ;     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     R     ┃     S     ┃     T     ┃     D     ┃   ┃     H     ┃     N     ┃     E     ┃     I     ┃     O     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     K     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     \     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃    DEL    ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃           ┃   BSPC    ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
              &kp Q                 &kp W  &kp E      &kp R            &kp T        &kp Y               &kp U        &kp I                   &kp O        &kp P
              &kp A                 &kp S  &kp D      &kp F            &kp G        &kp H               &kp J        &kp K                   &kp L        &colon_switch
&lt 3 ESCAPE  &mt UNDERSCORE MINUS  &kp X  &kp C      &kp V            &kp B        &kp N               &kp M        &kp COMMA               &triple_dot  &double_slash  &key_repeat
                                           &kp LCTRL  &lt 1 BACKSPACE  &kp LSHFT    &mt LEFT_ALT ENTER  &lt 4 SPACE  &lt 2 LEFT_PARENTHESIS
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        sym_layer {
            label = "SYMBOLS";
            bindings = <
        &kp TILDE  &kp PLUS    &kp MINUS     &kp PERCENT  &kp LS(NUMBER_3)    &trans              &kp AT    &double_pipe  &kp CARET  &kp BSPC
        &trans     &kp LBRC    &kp STAR      &kp RBRC     &double_bslash      &triple_apostrophe  &kp LPAR  &kp QMARK     &kp RPAR   &double_hash
&trans  &trans     &double_lt  &double_bang  &double_gt   &trans              &double_underscore  &kp LBKT  &kp AMPS      &kp RBKT   &trans        &trans
                               &trans        &trans       &trans              &trans              &trans    &trans
            >;
        };

        number_layer {
            label = "NUMBERS";
            bindings = <
        &trans  &kp N7  &kp N8  &kp N9  &trans       &trans  &kp LS(AT_SIGN)  &trans  &trans  &trans
        &kp N0  &kp N4  &kp N5  &kp N6  &kp LS(G)    &trans  &kp J            &kp K   &trans  &trans
&trans  &trans  &kp N1  &kp N2  &kp N3  &kp V        &trans  &trans           &trans  &trans  &trans  &trans
                        &trans  &trans  &trans       &trans  &trans           &trans
            >;
        };

        fun_layer {
            label = "FUNCTIONS";
            bindings = <
        &trans  &kp F7  &kp F8  &kp F9  &kp F12    &trans  &trans  &trans  &trans  &trans
        &trans  &kp F4  &kp F5  &kp F6  &kp F11    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F1  &kp F2  &kp F3  &kp F10    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans     &trans  &trans  &trans
            >;
        };

        nav_layer {
            label = "NAV";
            bindings = <
        &trans           &kp PG_UP       &mmv MOVE_UP     &kp PG_DN          &kp END          &kp END         &mkp LCLK       &mkp RCLK     &mkp MCLK        &kp K_NEXT
        &kp PRINTSCREEN  &mmv MOVE_LEFT  &mmv MOVE_DOWN   &mmv MOVE_RIGHT    &kp K_BACK       &kp LEFT        &kp DOWN        &kp UP        &kp RIGHT        &kp K_PLAY_PAUSE
&trans  &kp K_MUTE2      &kp K_MUTE      &kp K_VOLUME_UP  &kp K_VOLUME_DOWN  &kp K_FORWARD    &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &kp K_PREV        &trans
                                         &trans           &trans             &trans           &trans          &trans          &trans
            >;
        };

        game_layer {
            label = "GAMING";
            bindings = <
        &kp T      &kp Q  &kp W   &kp E   &kp R     &trans  &trans  &trans  &trans  &trans
        &kp LSHFT  &kp A  &kp S   &kp D   &kp F     &trans  &trans  &trans  &trans  &trans
&trans  &kp LCTRL  &kp Z  &kp X   &kp C   &kp V     &trans  &trans  &trans  &trans  &trans  &trans
                          &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
