//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors/num_word.dtsi>
#include "keys_en_gb.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

&num_word { continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL J K AT_SIGN V G LS(G)>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_ctrl_del {
            bindings = <&kp LC(DELETE)>;
            key-positions = <2 1 3>;
        };

        combo_ctrl_w {
            bindings = <&kp LC(W)>;
            key-positions = <7 6 8>;
        };

        combo_eq {
            bindings = <&HT_Double_Equal 0 EQUAL>;
            key-positions = <6 7>;
        };

        combo_ctrl_r {
            bindings = <&sk LCTRL>;
            key-positions = <17 18>;
        };

        combo_ctrl_l {
            bindings = <&sk LCTRL>;
            key-positions = <11 12>;
        };

        combo_del {
            bindings = <&kp DEL>;
            key-positions = <13 14>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <11 12 13>;
        };

        combo_write {
            bindings = <&write>;
            key-positions = <16 17 18>;
        };

        combo_super_l {
            bindings = <&sk LEFT_WIN>;
            key-positions = <23 24>;
        };

        combo_super_r {
            bindings = <&sk LEFT_ALT>;
            key-positions = <27 28>;
        };

        combo_shift_l {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <24 25>;
        };

        combo_shift_r {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <26 27>;
        };

        combo_dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <28 29>;
        };

        combo_close_window {
            bindings = <&quit>;
            key-positions = <22 23 24>;
        };

        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <27 28>;
        };

        combo_capsword {
            bindings = <&caps_word>;
            key-positions = <12 17>;
        };

        combo_speech {
            bindings = <&HT_Triple_Speech 0 GB_DQT>;
            key-positions = <11 13>;
        };

        combo_quotes {
            bindings = <&HT_Triple_Quote 0 SQT>;
            key-positions = <16 18>;
        };

        combo_leq {
            bindings = <&leq>;
            key-positions = <3 13>;
        };

        combo_from {
            bindings = <&from>;
            key-positions = <2 12>;
        };

        combo_geq2 {
            bindings = <&geq2>;
            key-positions = <6 16>;
        };

        combo_to {
            bindings = <&combo_to>;
            key-positions = <7 17>;
        };

        combo_geq1 {
            bindings = <&geq1>;
            key-positions = <13 24>;
        };

        combo_hsplit {
            bindings = <&hsplit>;
            key-positions = <11 22>;
        };

        combo_vsplit {
            bindings = <&vsplit>;
            key-positions = <22 23>;
        };

        combo_numword {
            bindings = <&numword_tapdance>;
            key-positions = <36 33>;
        };

        combo_z {
            bindings = <&kp Z>;
            key-positions = <21 22>;
        };

        combo_game_layer {
            bindings = <&tog 6>;
            key-positions = <0 21 30 9>;
        };

        combo_backspace_word {
            bindings = <&kp LC(BSPC)>;
            key-positions = <8 9>;
        };

        bt {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <22 23 24 25 26 27 28 29>;
        };
    };

    macros {
        write: write {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp COLON &kp W &kp ENTER>;
            label = "WRITE";
        };

        quit: quit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(W) &kp Q &kp ENTER>;
            label = "QUIT";
        };

        from: from {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp LT &kp MINUS &kp SPACE>;
            label = "FROM";
        };

        combo_to: to {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp SPACE &kp MINUS &kp GT &kp SPACE>;
            label = "TO";
        };

        geq1: geq1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp SPACE &kp GT &kp EQUAL &kp SPACE>;
            label = "GEQ1";
        };

        geq2: geq2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp SPACE &kp EQUAL &kp GT &kp SPACE>;
            label = "GEQ2";
        };

        leq: leq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp SPACE &kp LT &kp EQUAL &kp SPACE>;
            label = "LEQ";
        };

        hsplit: hsplit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(W) &kp S>;
            label = "HSPLIT";
        };

        vsplit: vsplit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(W) &kp V>;
            label = "VSPLIT";
        };

        double_underscore: double_underscore {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            label = "Double Underscore";
            bindings = <&kp UNDER &kp UNDER>;
        };

        double_lt: double_lt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            label = "Double Less Than";
            bindings = <&kp LT &kp LT>;
        };

        double_gt: double_gt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            label = "Double Greater Than";
            bindings = <&kp GT &kp GT>;
        };

        double_slash: double_slash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            label = "Double Slash";
            bindings = <&kp SLASH &kp SLASH>;
        };

        double_bslash: double_bslash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            label = "Double Backslash";
            bindings = <&kp GB_BSLH &kp GB_BSLH>;
        };

        double_hash: double_hash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            label = "Double Hash";
            bindings = <&kp GB_HASH &kp GB_HASH>;
        };

        triple_speech: triple_speech {
            compatible = "zmk,behavior-macro";
            label = "Triple Speech";
            #binding-cells = <0>;
            bindings = <&kp GB_DQT &kp GB_DQT &kp GB_DQT>;
        };

        triple_quote: triple_quote {
            compatible = "zmk,behavior-macro";
            label = "Triple Quote";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SQT &kp SQT>;
        };

        triple_eq: triple_eq {
            compatible = "zmk,behavior-macro";
            label = "Triple Equals";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL &kp EQUAL>;
        };

        triple_zero: triple_zero {
            compatible = "zmk,behavior-macro";
            label = "Triple Zero";
            #binding-cells = <0>;
            bindings = <&kp N0 &kp N0 &kp N0>;
        };

        triple_dot: triple_dot {
            compatible = "zmk,behavior-macro";
            label = "Triple Dot";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp DOT &kp PERIOD>;
        };

        double_pipe: double_pipe {
            compatible = "zmk,behavior-macro";
            label = "Space Double Pipe Space";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp GB_PIPE &kp GB_PIPE &kp SPACE>;
        };

        double_equal: double_equal {
            compatible = "zmk,behavior-macro";
            label = "Space Double Equal Space";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp EQUAL &kp EQUAL &kp SPACE>;
        };

        double_amp: double_amp {
            compatible = "zmk,behavior-macro";
            label = "Space Double Ampersand Space";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp AMPS &kp AMPS &kp SPACE>;
        };

        double_bang: double_bang {
            compatible = "zmk,behavior-macro";
            label = "Space Bang Equal Space";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp EXCL &kp EQUAL &kp SPACE>;
        };

        triple_apostrophe: triple_apostrophe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
            label = "TRIPLE_APOSTROPHE";
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            label = "AUTOSHIFT_KP";
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            // <&macro_press>,
            // <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
            // <&macro_pause_for_release>,
            // <&macro_release>,
            // <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };

        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            label = "MACRO_SHIFTED_KP";
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;
        };
    };

    behaviors {
        numword_holdtap: numword_holdtap {
            compatible = "zmk,behavior-hold-tap";
            label = "numword_holdtap";
            flavor = "hold-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&mo>, <&num_word>;
        };

        numword_tapdance: numword_tapdance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&numword_holdtap 5 2>, <&tog 2>;
        };

        colon_switch: colon_switch {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMICOLON>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        HT_Double_Underscore: hold_tap_double_underscore {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_Double_Underscore";
            flavor = "hold-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&double_underscore>, <&kp>;
        };

        HT_Double_LT: ht_double_LT {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_Double_LT";
            flavor = "hold-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&double_lt>, <&kp>;
        };

        HT_Double_GT: ht_double_GT {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_Double_GT";
            flavor = "hold-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&double_gt>, <&kp>;
        };

        HT_Double_Slash: ht_double_slash {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_Double_Slash";
            flavor = "hold-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&double_slash>, <&kp>;
        };

        HT_Double_Bslash: ht_double_bslash {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_Double_Backslash";
            flavor = "hold-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&double_bslash>, <&kp>;
        };

        HT_Double_Hash: ht_double_hash {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_Double_Hash";
            flavor = "hold-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&double_hash>, <&kp>;
        };

        HT_Triple_Speech: ht_triple_speech {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_Triple_Speech";
            flavor = "hold-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&triple_speech>, <&kp>;
        };

        HT_Triple_Quote: ht_triple_quote {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_Triple_Quote";
            flavor = "hold-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&triple_quote>, <&kp>;
        };

        HT_Triple_Eq: ht_triple_eq {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_Triple_Equals";
            flavor = "hold-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&triple_eq>, <&kp>;
        };

        HT_Triple_Zero: ht_triple_zero {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_Triple_Zero";
            flavor = "hold-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&triple_zero>, <&kp>;
        };

        HT_Triple_Dot: ht_triple_dot {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_Triple_Dot";
            flavor = "hold-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&triple_dot>, <&kp>;
        };

        HT_Double_Pipe: ht_double_pipe {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_Double_Pipe";
            flavor = "hold-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&double_pipe>, <&kp>;
        };

        HT_Double_Equal: ht_double_equal {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_Double_Equal";
            flavor = "hold-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&double_equal>, <&kp>;
        };

        HT_Double_Amps: ht_double_amps {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_Double_Amps";
            flavor = "hold-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&double_amp>, <&kp>;
        };

        HT_Double_Bang: ht_double_bang {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_Double_Bang";
            flavor = "hold-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&double_bang>, <&kp>;
        };

        HT_Triple_Apostrophe: ht_triple_apostrophe {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_Triple_Apostrophe";
            flavor = "hold-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&triple_apostrophe>, <&kp>;
        };

        HT_underscore_hyphen: HT_underscore_hyphen {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_UNDERSCORE_HYPHEN";
            flavor = "hold-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
        };

        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            bindings = <&shifted>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        colon_switch_2: colon_switch_2 {
            compatible = "zmk,behavior-hold-tap";
            label = "COLON_SWITCH_2";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     F     ┃     P     ┃     G     ┃   ┃     J     ┃     L     ┃     U     ┃     Y     ┃     ;     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     R     ┃     S     ┃     T     ┃     D     ┃   ┃     H     ┃     N     ┃     E     ┃     I     ┃     O     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     K     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     \     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃    DEL    ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃           ┃   BSPC    ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
              &kp Q                    &kp W  &kp E      &kp R            &kp T        &kp Y               &kp U        &kp I      &kp O                 &kp P
              &kp A                    &kp S  &kp D      &kp F            &kp G        &kp H               &kp J        &kp K      &kp L                 &mt GB_SEMICOLON GB_COLON
&lt 3 ESCAPE  &mt KP_MINUS UNDERSCORE  &kp X  &kp C      &kp V            &kp B        &kp N               &kp M        &kp COMMA  &HT_Triple_Dot 0 DOT  &HT_Double_Slash 0 SLASH   &key_repeat
                                              &kp LCTRL  &lt 1 BACKSPACE  &kp LSHFT    &mt LEFT_ALT ENTER  &lt 4 SPACE  &kp TAB
            >;
        };

        sym_layer {
            label = "SYMBOLS";
            bindings = <
        &kp GB_TILDE  &kp PLUS            &kp MINUS                      &kp PERCENT         &kp GB_DOLLAR                  &kp GB_POUND_SIGN                   &kp AT    &HT_Double_Pipe 0 GB_PIPE  &kp CARET  &kp BSPC
        &trans        &kp LBRC            &kp STAR                       &kp RBRC            &HT_Double_Bslash 0 GB_BSLH    &HT_Triple_Apostrophe 0 GRAVE       &kp LPAR  &kp QMARK                  &kp RPAR   &HT_Double_Hash 0 GB_HASH
&trans  &trans        &HT_Double_LT 0 LT  &HT_Double_Bang 0 EXCLAMATION  &HT_Double_GT 0 GT  &trans                         &HT_Double_Underscore 0 UNDERSCORE  &kp LBKT  &kp AMPS                   &kp RBKT   &trans                     &trans
                                          &trans                         &trans              &trans                         &trans                              &trans    &trans
            >;
        };

        number_layer {
            bindings = <
        &trans  &kp PLUS  &kp MINUS  &kp PERCENT  &trans    &trans  &kp AT  &trans  &trans  &trans
        &kp N6  &kp N4    &kp N0     &kp N2       &trans    &trans  &kp N3  &kp N1  &kp N5  &kp N7
&trans  &trans  &trans    &trans     &kp N8       &trans    &trans  &kp N9  &kp J   &kp K   &trans  &trans
                          &trans     &trans       &trans    &trans  &trans  &trans
            >;

            label = "NUMBERS";
        };

        fun_layer {
            bindings = <
        &trans  &trans  &trans   &trans  &trans     &trans   &trans  &trans  &trans  &trans
        &kp F6  &kp F4  &kp F10  &kp F2  &kp F12    &kp F11  &kp F3  &kp F1  &kp F5  &kp F7
&trans  &trans  &trans  &trans   &kp F8  &trans     &trans   &kp F9  &trans  &trans  &trans  &trans
                        &trans   &trans  &trans     &trans   &trans  &trans
            >;

            label = "FUNCTIONS";
        };

        nav_layer {
            label = "NAV";
            bindings = <
        &trans           &kp PG_UP       &mmv MOVE_UP     &kp PG_DN          &kp END          &kp END         &mkp LCLK       &mkp RCLK     &mkp MCLK        &kp K_NEXT
        &kp PRINTSCREEN  &mmv MOVE_LEFT  &mmv MOVE_DOWN   &mmv MOVE_RIGHT    &kp K_BACK       &kp LEFT        &kp DOWN        &kp UP        &kp RIGHT        &kp K_PLAY_PAUSE
&trans  &kp K_MUTE2      &kp K_MUTE      &kp K_VOLUME_UP  &kp K_VOLUME_DOWN  &kp K_FORWARD    &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &kp K_PREV        &trans
                                         &trans           &trans             &trans           &trans          &trans          &trans
            >;
        };

        wnav_layer {
            bindings = <
        &trans      &trans      &trans      &trans      &trans    &trans  &trans      &trans      &trans      &trans
        &kp LA(N6)  &kp LA(N4)  &kp LA(N0)  &kp LA(N2)  &trans    &trans  &kp LA(N3)  &kp LA(N1)  &kp LA(N5)  &kp LA(N7)
&trans  &trans      &trans      &trans      &kp LA(N8)  &trans    &trans  &kp LA(N9)  &trans      &trans      &trans      &trans
                                &trans      &trans      &trans    &trans  &trans      &trans
            >;

            label = "WNAV";
        };

        game_layer {
            label = "GAMING";
            bindings = <
        &mt TAB T  &kp Q  &kp W     &kp E      &kp R     &trans  &trans  &trans  &trans  &trans
        &kp LSHFT  &kp A  &kp S     &kp D      &kp F     &trans  &trans  &trans  &trans  &trans
&trans  &kp LCTRL  &kp Z  &kp X     &kp C      &kp V     &trans  &trans  &trans  &trans  &trans  &trans
                          &lt 7 N2  &kp SPACE  &kp N1    &trans  &trans  &trans
            >;
        };

        game_num_layer {
            bindings = <
           &kp Y  &kp N1  &kp N2  &kp N3  &kp T     &trans  &trans  &trans  &trans  &trans
           &kp H  &kp N4  &kp N5  &kp N6  &kp G     &trans  &trans  &trans  &trans  &trans
&kp GRAVE  &kp N  &kp N7  &kp N8  &kp N9  &kp B     &trans  &trans  &trans  &trans  &trans  &trans
                          &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "GAMING NUMS";
        };

        number_layer_2 {
            label = "NUMBERS_2";
            bindings = <
        &trans  &kp N7  &kp N8  &kp N9  &trans       &trans  &kp GB_AT_SIGN  &trans  &trans  &trans
        &kp N0  &kp N4  &kp N5  &kp N6  &kp LS(G)    &trans  &kp J           &kp K   &trans  &trans
&trans  &trans  &kp N1  &kp N2  &kp N3  &kp V        &trans  &trans          &trans  &trans  &trans  &trans
                        &trans  &trans  &trans       &trans  &trans          &trans
            >;
        };

        fun_layer_2 {
            label = "FUNCTIONS_2";
            bindings = <
        &trans  &kp F7  &kp F8  &kp F9  &kp F12    &trans  &trans  &trans  &trans  &trans
        &trans  &kp F4  &kp F5  &kp F6  &kp F11    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F1  &kp F2  &kp F3  &kp F10    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans     &trans  &trans  &trans
            >;
        };
    };
};
